#!/opt/freeware/bin/python
# build os400 spec files from perzl/toolkit rpms
# usage: os400repackage dir
import os
from subprocess import Popen, PIPE
import sys

rootDir = '.'
specDir = './os400_SPECS'

if len(sys.argv) < 2:
  print("usage: python gen_repackage.py dir");
  sys.exit(2)
else:
  rootDir = sys.argv[1]

if not os.path.isdir(specDir):
  os.mkdir(specDir)
for dirName, subdirList, fileList in os.walk(rootDir):
  print('\n---Directory ... ' + dirName +'---')
  for oldrpm in fileList:
    print("Found ... " + oldrpm)
    if '.rpm' in oldrpm:
      print("Reading ... " + oldrpm)
      query = '--queryformat="'
      query += 'Summary: %{SUMMARY}\n'
      query += 'Name: %{NAME}\n'
      query += 'Version: %{VERSION}\n'
      query += 'Release: %{RELEASE}\n'
      query += 'License: %{LICENSE}\n'
      query += 'URL: %{URL}\n'
      query += 'Group: %{GROUP}\n'
      query += '"'
      myspec_header = ""
      myspec_head = {'Summary':'','Name':'','Version':'','Release':'','License':'','URL':'','Group':''}
      pipe = Popen('rpm -qp ' +  query + " " + dirName + '/' + oldrpm, shell=True, stdout=PIPE, close_fds=True)
      for line in pipe.stdout:
         line = line.strip()
         if line:
           myspec_header += line + "\n"
           parts = line.split(':')
           nam = parts[0].strip()
           val = parts[1].strip()
           myspec_head[nam] = val

      myname = myspec_head['Name']
      
      myqual = myname
      myqual += '-' + myspec_head['Version']
      myqual += '-' + myspec_head['Release']

      mytemp = myqual
      mytemp += '.ppc'
      
      myspec = myqual
      myspec += '.os400'
      myspec += '.noarch'
      myspec += '.spec'

      mypatch = myqual
      mypatch += '.spec'
      mypatch += '.patch'

      adir = os.path.dirname(dirName)
      mypatch_file = adir + "/os400_patch/" + mypatch

      myroot = "/var/tmp/" + mytemp

      myspec_comment = "#\n"
      myspec_comment += "# rpmbuild -ba --target=noarch " + myspec + "\n"
      myspec_comment += "#\n"

      myspec_body = ""      
      myspec_body += "BuildRoot: /var/tmp/" + myname + "\n"
      myspec_body += "\n"
      myspec_body += "%description\n"
      myspec_body += myspec_head['Summary'] + "\n"
      myspec_body += "(repackage " + oldrpm + " from " + dirName + ").\n"
      myspec_body += "\n"
      myspec_body += "%build\n"
      myspec_body += "\n"
      myspec_body += "%clean\n"
      myspec_body += "\n"
      
      myspec_install = "\n%install\n"
      myspec_install += "rm -r /var/tmp/*\n"
      
      myspec_files = "\n%files\n"
      myspec_files += "%defattr(-,root,system)\n"
      pipe = Popen('rpm -qlp ' + dirName + '/' + oldrpm, shell=True, stdout=PIPE, close_fds=True)
      lines = []
      mydirs = []
      for line in pipe.stdout:
        if '/' in line:
          lines.append(line)

      # -----
      # is this real
      anyrealpath = False
      allrealpath = True
      for line in lines:
        item = line.strip()
        if os.path.isdir(item) or os.path.isfile(item) or os.path.islink(item):
          anyrealpath = True
          print (item + " ... ok")
        else:
          allrealpath = False
          myspec_comment += "# build missing file ... " + item + "\n"
          print (item + " ... NOT FOUND")
      if not allrealpath:
        print(myspec + " ... SKIP")
        if anyrealpath:
          print (myspec + " ... was partially ok")
        else:
          continue

      # -----
      # set up dirs first
      for line in lines:
        item = line.strip()
        if os.path.isdir(item):
          # print("is dir " + item)
          mydir = myroot + item
          if not mydir in mydirs:
            myspec_install += "mkdir -p " + mydir + "\n"
            mydirs.append(mydir)
        elif os.path.isfile(item):
          adir = os.path.dirname(item)
          mydir = myroot + adir
          if os.path.isdir(adir):
            if not mydir in mydirs:
              myspec_install += "mkdir -p " + mydir + "\n"
              mydirs.append(mydir)
      # ----
      # special file patch
      if os.path.isfile(mypatch_file):
        with open(mypatch_file) as fp:
          for line in fp:
            item = line.strip()
            if '/' in item:
              adir = os.path.dirname(item)
              mydir = myroot + adir
              if os.path.isdir(adir):
                if not mydir in mydirs:
                  myspec_install += "mkdir -p " + mydir + "\n"
                  mydirs.append(mydir)

      # -----
      # copy files second
      for line in lines:
        item = line.strip()
        if os.path.islink(item):
          continue
        if os.path.isfile(item):
          # print("is file " + item)
          myspec_install += "cp " + item + " " + myroot + item + "\n"
          myspec_files += item + "\n"
      # ----
      # special file patch
      if os.path.isfile(mypatch_file):
        with open(mypatch_file) as fp:
          for line in fp:
            item = line.strip()
            if '/' in item:
              myspec_install += "cp " + item + " " + myroot + item + "\n"
              myspec_files += item + "\n"

      # ----
      # symbolic links last
      for line in lines:
        item = line.strip()
        if os.path.islink(item):
          # print("is link " + item)
          adir = os.path.dirname(item)
          mydir = myroot + adir
          mylinksym = os.path.basename(item)
          mylinkact = os.readlink(item)
          myspec_install += "cd " + mydir + "\n"
          myspec_install += "ln -sf " + mylinkact + " " + mylinksym + "\n"
          myspec_files += item + "\n"
      
      # ----
      # change owner
      myspec_install += "chown -R -P qsys " + myroot

      # -----
      # print spec file
      file_spec = specDir + "/" + myspec
      file_data = ""
      file_data += myspec_comment 
      file_data += myspec_header
      file_data += myspec_body
      file_data += myspec_install
      file_data += myspec_files
      print("Writing ... " + file_spec)
      with open(file_spec, "w") as text_file:
        text_file.write(file_data)
  
          
          
          
          
          
